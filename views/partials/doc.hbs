<h1>A <span class="key3">study</span> on the Effect of <span class="key1">traceability</span> <span class="key2">links</span> in <span class="key7">software</span> Maintenance</h1><p><strong>Abstract:</strong> </p><p>In <span class="key7">software</span> development, stakeholders of the same <span class="key4">project</span> often collaborate asynchronously through shared artifacts. A <span class="key1">traceability</span> system <span class="key2">links</span> a project's <span class="key6">artifacts</span> and therefore provides support for collaboration among stakeholders. Different stakeholders are interested in different types of <span class="key1">traceability</span> links. The literature often states that <span class="key1">traceability</span> is useful but expensive to build and maintain. However, there is no <span class="key3">study</span> showing reduction in effort when <span class="key1">traceability</span> <span class="key2">links</span> among various <span class="key7">software</span> <span class="key6">artifacts</span> are provided and used during the maintenance phase. This paper presents a <span class="key3">study</span> evaluating the benefits of using <span class="key1">traceability</span> among requirements, design, code, code inspections, builds, defects, and tests <span class="key6">artifacts</span> in the maintenance phase. Before the study, a survey was conducted at a large industrial firm to determine the type of <span class="key2">links</span> that different stakeholders are interested in. Twenty-five stakeholders from this firm participated in a survey to define the type of <span class="key1">traceability</span> <span class="key2">links</span> that were of interest to them. With this result, a <span class="key1">traceability</span> link model is proposed that categorizes different types of <span class="key1">traceability</span> <span class="key2">links</span> based on stakeholders' roles. This link model was used in the study. Twenty-eight <span class="key10">subjects</span> from industry and academia participated in the empirical <span class="key3">study</span> that was conducted after the survey. A prototype link-tracing tool, TraceLink, was developed and used in the <span class="key3">study</span> to present <span class="key1">traceability</span> <span class="key2">links</span> to the experimental group, whereas the control group was not given any <span class="key2">links</span> to solve the tasks. Five maintenance <span class="key5">tasks</span> were used in the study. The results show a significant improvement in task accuracy (86.06%) when <span class="key1">traceability</span> <span class="key2">links</span> were given to the subjects. In conclusion, a <span class="key1">traceability</span> model based on an industrial survey provided <span class="key1">traceability</span> views that are based on stakeholders' roles. This empirical <span class="key3">study</span> provides evidence that <span class="key1">traceability</span> <span class="key2">links</span> are effective in solving maintenance <span class="key5">tasks</span> with higher accuracy.</p><p>SECTION I.</p><h2>Introduction</h2><p>Different stakeholders such as product managers, <span class="key4">project</span> managers, business analysts, developers, and testers are involved in the development of <span class="key7">software</span> systems. Product managers investigate, select, and develop products for an organization. They consider numerous factors such as the intended demographic, the products offered by the competition, and how well the product fits with the company's business model. <span class="key4">project</span> managers are assigned by the performing organization to achieve <span class="key4">project</span> objectives. Business analysts or system engineers develop <span class="key4">project</span> requirements, developers implement the system's <span class="key9">requirements</span> and testers verify these requirements.</p><p>Software development is one of the most difficult <span class="key5">tasks</span> performed by humans. Because of the growing size and complexity of <span class="key7">software</span> systems, the coordination of work, artifacts, and developers has become a challenge [1]. During the development process of <span class="key7">software</span> systems, stakeholders develop different <span class="key6">artifacts</span> for the system. Some of these artifacts, for example, are <span class="key4">project</span> plans, requirement documents, testing plans, design documents, code, code inspection records, build information, and defect records. Different means of collaboration exist between stakeholders of a <span class="key7">software</span> system. One such means is artifact-based collaboration.</p><h4>Definition</h4><p>We define Artifact-based collaboration to be a form of asynchronous collaboration in which different stakeholders create or make use of <span class="key6">artifacts</span> at different points of the <span class="key7">software</span> development life cycle. There are two types of collaborations between the stakeholders of a <span class="key7">software</span> system. One is synchronous collaboration, which includes group meetings and other typical teamwork approaches. The other is asynchronous collaboration, where for example, a programmer works with an analyst to implement a certain feature. They do not meet and may not even communicate with each other directly. Artifact-based collaboration is accomplished through sharing and collaborative co-authoring of common <span class="key6">artifacts</span> of a project. Artifact-based collaboration can be enhanced through a <span class="key1">traceability</span> system that explicitly <span class="key2">links</span> system <span class="key6">artifacts</span> together. A <span class="key1">traceability</span> system is comprised of a linked artifact space in which stakeholders traverse <span class="key2">links</span> between artifacts. The <span class="key2">links</span> in the <span class="key1">traceability</span> system are used for artifact-based collaborations, and they are referred to as <span class="key1">traceability</span> <span class="key2">links</span> in this paper.</p><p>The general consensus is that <span class="key1">traceability</span> between different <span class="key6">artifacts</span> helps reduce development and maintenance time and cost thereby improving the quality of the system [2]. However, there is no published evidence of the effect of <span class="key1">traceability</span> <span class="key2">links</span> in <span class="key7">software</span> maintenance <span class="key5">tasks</span> in industry. This paper seeks to gather such evidence through an empirical study. Before conducting the empirical study, a survey was conducted to determine the link model that fits stakeholder roles. This link model is used in the empirical study. Note that the intent of this paper is not to create a <span class="key1">traceability</span> system [3], rather the goal is to show the effect of <span class="key2">links</span> on maintenance tasks. For this reason, a simple prototype TraceLink was created that provided us with enough linking to run the study.</p><p>In the past decade, there has been a lot of progress made in the field of <span class="key7">software</span> <span class="key1">traceability</span> [4] (especially with link recovery and more recently with link evolution) in academia. The grand challenges document [5] for <span class="key1">traceability</span> lists specific research problems that need to be solved pertaining to traceability. Even though there has been progress made in academia, the same cannot be said about industry. <span class="key1">traceability</span> mechanisms are still not widely adopted by industry due to the added effort needed to create and maintain <span class="key1">traceability</span> <span class="key2">links</span> between <span class="key7">software</span> <span class="key6">artifacts</span> [6] and the lack of supporting tools [7]. The goal of this paper is not to propose a new <span class="key1">traceability</span> system; but rather to investigate the following research questions resulting in two significant contributions to <span class="key1">traceability</span> evidence and future <span class="key1">traceability</span> <span class="key8">tool</span> developers: </p><ul><li>RQ1: In industry, what kinds of <span class="key1">traceability</span> <span class="key2">links</span> is each stakeholder interested in?</li><li>RQ2: Do <span class="key1">traceability</span> <span class="key2">links</span> help <span class="key7">software</span> maintenance tasks?</li></ul><p>In order to answer the first question, an industrial survey was conducted at a large <span class="key7">software</span> development firm. The results of the survey are presented from the point of view of each stakeholder. The second question is addressed by conducting a controlled experiment using industry experts as well as students in a senior <span class="key7">software</span> engineering capstone class.</p><p>This paper is organized as follows. The Section II defines what we mean by <span class="key1">traceability</span> links. Section III presents the industrial survey, stakeholder benefits, real life scenarios that occurred at an industrial firm and a high-level <span class="key1">traceability</span> meta-model as a consequence of the survey. Section IV presents a controlled experiment conducted on the effect of <span class="key1">traceability</span> <span class="key2">links</span> (via a prototype linking <span class="key8">tool</span> TraceLink), on several <span class="key7">software</span> maintenance tasks. This is followed by a discussion in Section V and threats to validity in Section VII. Section VIII presents related work and Section IX discusses future work and concludes this paper.</p><p>SECTION II.</p><h2>Defining <span class="key1">traceability</span> Links</h2><p>Software <span class="key1">traceability</span> refers to the process of creating/discovering and maintaining <span class="key2">links</span> between the different <span class="key6">artifacts</span> i.e., how does a particular source code element relate to a corresponding design element. The <span class="key1">traceability</span> definition used in this paper was built on previous work [8] in this area.</p><p>At the most general level, <span class="key1">traceability</span> <span class="key2">links</span> can be categorized into vertical and horizontal <span class="key1">traceability</span> links. Horizontal <span class="key1">traceability</span> refers to <span class="key2">links</span> within a model (intra-artifact links). Vertical <span class="key1">traceability</span> <span class="key2">links</span> are <span class="key2">links</span> across models. Under each of the two general link types we have causal <span class="key2">links</span> and non-causal <span class="key2">links</span> as defined in [8], [9]. The main points of causal, and non-causal <span class="key2">links</span> are reiterated in the definitions that follow.</p><h4>Definition: Causal Links</h4><p>Represent relationships that have an implied logical ordering between source and sink. For e.g., bug reports cannot be produced unless the source code is available. A causal link is always directional because it implies causality from source to sink; something happens and causes something else to happen. This establishes a partial ordering in time among the entities involved [10]. When this partial order in time is violated, it is possible that the link between the source and sink has been broken. Mathematically, the causal relationship is transitive, irreflexive, and anti-symmetric.</p><h4>Definition: Non-Causal Links</h4><p>Represent relationships that must agree with each other, but the causality cannot be clearly determined. For e.g., multiple versions of the same document in different languages must agree, but there need not be a causal relationship among them. A non-causal link is un-directional. Changes to the source or sink of a non-causal relationship can cause the logical semantics of the link to become invalid. Mathematically, the non-causal relationship is transitive, reflexive, and symmetric.</p><p>Most horizontal <span class="key2">links</span> are explicit, for example, two classes in a UML class diagram have a link since they have an association between them. But some <span class="key2">links</span> might exist within a model even though they are not explicitly linked. We call these hidden <span class="key2">links</span> i.e., <span class="key2">links</span> within a model that help in traceability. For e.g., three classes in a design model work towards a common feature of the system but there is no obvious linking between them on the UML class diagram. These <span class="key2">links</span> could help in feature location or impact analysis tasks. Such a link (or set of links) could be a causal or non-causal. We consider <span class="key2">links</span> across models and hidden <span class="key2">links</span> (within a model as well as across models) to be most important for traceability. <span class="key1">traceability</span> link semantics such as those presented by Zisman et al. [11], [12] are viewed as complementary to the above definitions.</p><p>SECTION III.</p><h2>Industrial Survey</h2><p>We studied the linking system utilized at a large industrial firm. The firm develops a set of artifacts, described below, stored at different repositories. These repositories are utilized throughout the development cycle of <span class="key7">software</span> systems. The firm uses both the waterfall model and Scrum agile methods via the Rally tool<sup>1</sup> to develop their <span class="key7">software</span> systems.</p><p>The following are managed by the repositories utilized at the company: </p><ul><li>Project management <span class="key6">artifacts</span> such as the <span class="key4">project</span> plan, <span class="key4">project</span> charter, and statement of work.</li><li>Requirements artifacts.</li><li>Design <span class="key6">artifacts</span> such as use cases, sequence, class, state, and activity diagrams.</li><li>Source code.</li><li>Code Inspection records.</li><li>Tests <span class="key6">artifacts</span> such as test cases and their execution results.</li><li>Defects records.</li><li>Builds and Releases <span class="key6">artifacts</span> contain builds and releases information.</li></ul><p>At most established industrial firms and including the one used in this paper, the repositories that store the above <span class="key6">artifacts</span> are not linked together. Some of the above systems are purchased from different third party vendors. Companies that develop <span class="key7">software</span> projects are always in a need to link some or all of these repositories to help developers, testers, and <span class="key4">project</span> managers manage projects and meet deadlines.</p><p>In order to provide insight into the first research question, a survey was conducted at a large industrial firm. Three product managers (PdM), four <span class="key4">project</span> managers (PrM), two business analysts (BA), nine testers (T), and seven developers (D) were used in the survey to gain input into the types of <span class="key1">traceability</span> <span class="key2">links</span> they were interested in. Table I shows the number and range of experience among the stakeholders at the industrial firm. These stakeholders were asked to point out the type of <span class="key2">links</span> that would be helpful for them to perform their corresponding roles in the organization and the most important fields of each type of artifact that they are interested in Table II presents a form (excluding the x's) that was presented to each <span class="key4">project</span> stakeholder. It contains for each artifact the fields that belong to that artifact and cross references that <span class="key2">links</span> the artifact to other artifacts. Stakeholders pointed out the fields and the <span class="key2">links</span> that they are interested in by marking an ‘x’ near the specified row. These results are summarized by majority vote in Table II. An ‘x’ refers to the most interesting fields to each stakeholder. The fields that are in bold represent fields that if changed, the appropriate stakeholder needs to be notified. </p><p>We summarize Table II below. </p><ul><li>Requirements Artifacts: Developers, testers, <span class="key4">project</span> managers, <span class="key4">project</span> managers, and business analysts are interested in the ID/version number, description, author, and date/version number fields.</li><li>Design Artifacts: Developers are interested in ID/version number, name, description, author, date and status. <span class="key4">project</span> managers are interested in status field.</li><li>Code Artifacts: Developers are interested in the fields ID/version number, name, date, owner, and description.</li><li>Build Artifacts: Developers and testers are interested in the fields ID/version number, location, and date. <span class="key4">project</span> managers are interested in ID/version number and date.</li><li>Release Artifacts: Developers and testers are interested in the fields ID/version number, location, date, and release notes. Product managers, <span class="key4">project</span> managers and business analysts are interested in the fields Id/version number, date, and release notes.</li><li>Test case artifacts: Testers are interested in the fields ID/version number, title, name, test phase, status, last attempt, expected duration, actual duration, tester(s) names, expected results and obtained results in the test case artifact.</li><li>Project Management artifacts: <span class="key4">project</span> managers, product managers and business analysts are interested in ID/version number, name, author, date, and description fields.</li><li>Defect Artifacts: Developers, testers and <span class="key4">project</span> managers are interested in ID/version number, description, create date, reported by, assigned to, status, attachments and logs/screenshots. Testers and <span class="key4">project</span> managers are also interested in severity, estimated hours, planned release, lifecycle fixed in, and actual hours fields.</li><li>Code inspection artifacts: Developers are interested in ID/version number, <span class="key4">project</span> name, description, review date, participants, material, defect logs and status. <span class="key4">project</span> managers are interested in ID/version number, <span class="key4">project</span> name and status.</li></ul><p>There are two important findings based on this survey. First, the type of <span class="key1">traceability</span> <span class="key2">links</span> among system's <span class="key6">artifacts</span> is based on the role of the stakeholder. Second, the type of stakeholder role also determines which field a stakeholder is interested in. It is important to point out that one of the <span class="key4">project</span> managers at the firm mentioned that he is interested in all linking between repositories to show <span class="key1">traceability</span> when an audit occurs.</p><h3>A. <span class="key1">traceability</span> Meta-Model</h3><p>Based on the industrial survey, a <span class="key1">traceability</span> meta-model was developed. Different stakeholders in the <span class="key7">software</span> development cycle are interested in different <span class="key1">traceability</span> <span class="key2">links</span> between different artifact repositories. A <span class="key1">traceability</span> model must support <span class="key1">traceability</span> <span class="key2">links</span> that are specific to each stakeholder role. A meta-model that requires support for <span class="key2">links</span> specific to each stakeholder role is shown in Fig. 1. In this meta-model, a TraceModel consists of one or more TraceLinks. A TraceLink contains two TraceElements (artifacts). A TraceElement has type and status attributes. The type is either “source” or “target”. The status is set to “modified” when one or more of the important fields in TraceElement are modified. Stakeholder has a Stakeholder role that traces one or more specific TraceLinks. For example, a Stakeholder Role can be a <span class="key4">project</span> manager, a developer or a tester. Each of these stakeholders traces specific <span class="key2">links</span> based on their roles. </p><p>Using the meta-model, the overall <span class="key1">traceability</span> model for the industrial firm is reflected in Fig. 2. The model when implemented will overcome some of the issues that have occurred at the firm due to lack of traceability. The <span class="key2">links</span> are defined based on stakeholders' roles. For example, using the model, a <span class="key4">project</span> manager can trace a requirement through design, code, code inspection, build, test, and defects. A developer can trace <span class="key9">requirements</span> to design, code, code inspection, build, and defects. The information in Fig. 2 should be taken into account when developing a <span class="key1">traceability</span> tool. </p><p>The following summarizes the five views in Fig. 2. </p><ol><li>Product managers are interested in the <span class="key2">links</span> between these <span class="key6">artifacts</span> (project management, requirements) and (requirements, release).</li><li>Developers are interested in the following <span class="key2">links</span> (requirements, release), (requirements, design), design, code), (code, code inspection), (code, build), (code, defect), (release, build), (build, defect), and (defect, test).</li><li>Testers are interested in the following <span class="key2">links</span> (requirements, release), (requirement, test), (release, build), (build, defect), (build, test), and (test, defect).</li><li>Business analysts are interested in the <span class="key2">links</span> between these <span class="key6">artifacts</span> (project management, requirements) and (requirements, release).</li><li>Project manager is interested in the <span class="key2">links</span> between all artifacts.</li></ol><p>While implementing the <span class="key1">traceability</span> model, reference fields for each artifact in the repository are used to point to another linked artifact in the same or external repository. To support the <span class="key1">traceability</span> across the <span class="key6">artifacts</span> utilized at the firm, all cross references shown in Table II need to be used. The <span class="key1">traceability</span> system shall support notifying stakeholders interested in the change. For example, stakeholders interested in an artifact change, register for the artifact. When the owner of the artifact modifies the artifact, he/she sets the status field in TraceElement to “modified”. The system automatically checks for each artifact that has a status field set to modified and sends notifications to registered stakeholders. It is important to point out that the meta-model is used to link the <span class="key4">project</span> <span class="key6">artifacts</span> used in the <span class="key3">study</span> below. However, future work is needed to validate the model at the industrial firm and other firms as well.</p><h3>B. <span class="key1">traceability</span> Benefits to Industry—Stakeholder Views</h3><p>We highlight below some of the <span class="key1">traceability</span> benefits reported by stakeholders at the firm. These benefits were captured as a result of interviewing different stakeholders listed in Table I. They were asked to point out the benefits that they could achieve by using a <span class="key1">traceability</span> system that <span class="key2">links</span> all <span class="key4">project</span> artifacts. It is important to mention that these benefits reflect the interviewed stakeholders views. In the future, we plan to conduct a <span class="key3">study</span> to measure the actual benefits of using a <span class="key1">traceability</span> system for each of the stakeholders.</p><p>All stakeholders of a <span class="key7">software</span> system may benefit from utilizing <span class="key1">traceability</span> for collaboration. Product managers introduce new systems to organizations or add new functionality to existing systems. In both situations, they trace existing systems' <span class="key6">artifacts</span> such the <span class="key4">project</span> plan, <span class="key4">project</span> charter, statement of work, requirements, and releases. A <span class="key1">traceability</span> system should reduce the product manager's time.</p><p>Project managers use <span class="key1">traceability</span> through the development cycle of <span class="key7">software</span> systems. At the start of a project, <span class="key4">project</span> manager traces similar products <span class="key6">artifacts</span> to help him/her estimate time needed to create such artifacts. During the development of the project, <span class="key4">project</span> manager continues to trace the <span class="key4">project</span> <span class="key6">artifacts</span> to report status and checking for completeness. At the surveyed industrial firm, a senior <span class="key4">project</span> manager mentioned that he is interested in tracing all project's <span class="key6">artifacts</span> (i.e., tracing <span class="key9">requirements</span> through development and all the way through testing). Using a <span class="key1">traceability</span> system shall reduce the time spent by <span class="key4">project</span> managers tracing the <span class="key4">project</span> artifacts.</p><p>Business analysts also benefit from traceability. They can use <span class="key1">traceability</span> to reuse existing <span class="key9">requirements</span> or define new <span class="key9">requirements</span> for new systems. They trace existing <span class="key6">artifacts</span> such as the <span class="key4">project</span> charter and requirements. A <span class="key1">traceability</span> system reduces the business analyst's time in the development life cycle.</p><p>Developers are usually assigned one or more <span class="key9">requirements</span> to implement. Some of these <span class="key9">requirements</span> may be changing or deleting existing functionality or developing a new functionality. In all of these situations, developers trace existing requirements, design, code, and test artifacts. A <span class="key1">traceability</span> system reduces developer's time in conducting these tasks.</p><p>Testers usually receive <span class="key9">requirements</span> and builds to test. The <span class="key9">requirements</span> may be already implemented in existing systems or they may be new. In both situations, they need to trace requirements, test cases and defects artifacts. A <span class="key1">traceability</span> system also reduces a tester's time.</p><p>Customers also benefit from traceability. For example, a developing organization may store their releases, upgrades, and their associated documentation in a system. Customers can access the system and trace what they have in the field (release builds) to what exists in the system. See scenario three in Section III-C for an example.</p><p>Another important activity that occurs in practice at industrial firms and benefits from <span class="key1">traceability</span> is auditing. <span class="key7">software</span> systems are usually audited by external organizations to verify their quality compliance to ISO and Capability Maturity Model Integration levels. Auditors verify that all required documentation for the <span class="key4">project</span> are in place. The goal is to show the auditor the process in place, the <span class="key6">artifacts</span> that exist for the system and the <span class="key1">traceability</span> between these artifacts. From our experience, some findings that auditors see in practice are lack of <span class="key1">traceability</span> between system artifacts. The existence of a <span class="key1">traceability</span> system can help organizations pass audits and achieve a higher level of compliance for their software. This is particularly important in the medical domain since there are laws in place that require traceability.</p><h3>C. Real-Life Scenarios</h3><p>This section describes interesting scenarios that have occurred in real projects that have caused problems for the <span class="key7">software</span> firm interviewed in this study. They have occurred because there is no (visual/textual) <span class="key1">traceability</span> system that <span class="key2">links</span> the different repositories of the <span class="key4">project</span> and no automatic notification when <span class="key6">artifacts</span> in the repository changed. These scenarios were brought to light by conducting interviews during the survey with <span class="key4">project</span> managers, testers and developers.</p><h4>Scenario One</h4><p>A <span class="key4">project</span> was developed in which there was no <span class="key1">traceability</span> <span class="key2">links</span> between the project's builds and test. During the project, many internal builds are developed that needed to be tested by the testing team; the last build of the internal builds is the release build. The procedure utilized between developers and testers was that the developers load the internal build on a specific machine and notify testers of the new build through email. Sometimes developers forget to notify testers of new builds and the testers become aware of the build late in the testing cycle. Some builds were tested late and that caused the project's schedule to be delayed.</p><h4>Scenario Two</h4><p>A <span class="key4">project</span> was developed in which two organizations were involved in developing the project. The organizations use an XML file as an interface between them. One organization develops the file while the other uses it in one of its <span class="key7">software</span> components. The process used by organizations was that when a new version of the XML file is developed, the organization using the XML file is notified through email. Developers have reported that many new versions of the XML file were developed and the using organization weren't aware of them on time. Such situations affected the project's schedule.</p><h4>Scenario Three</h4><p>In another project, a device that has a network interface card (NIC) was developed. The NIC is utilized to get the internal data off of the device. Customers buy these devices and use them in their network. The purpose of the NIC is to present the device data to users. Sometimes device <span class="key7">software</span> is updated in which new data in the device is added or existing data is deleted. In this case, a new version of the NIC <span class="key7">software</span> is developed to pull the new data. In practice what happens is that customers update the device <span class="key7">software</span> but don't update the NIC <span class="key7">software</span> and vice versa. Here, linking is needed in which a customer can see a link to all versions of the <span class="key7">software</span> for both NIC and the device itself.</p><p>In each of the above scenarios, a <span class="key1">traceability</span> system that is well maintained would have reduced the time taken and mitigate the problems that occurred in communication, development and maintenance.</p><p>SECTION IV.</p><h2>The Study</h2><p>The second research question seeks to determine if the presence of <span class="key1">traceability</span> <span class="key2">links</span> help in <span class="key7">software</span> maintenance tasks. This section presents details on the <span class="key3">study</span> conducted in industry and academia on the effect of <span class="key1">traceability</span> <span class="key2">links</span> in <span class="key7">software</span> maintenance tasks. The link model used in this <span class="key3">study</span> is based on the results of the industrial survey presented above. To conduct the study, we developed a prototype <span class="key1">traceability</span> <span class="key8">tool</span> that we call TraceLink. We first describe the prototype <span class="key8">tool</span> followed by the experiment details.</p><h3>A. Tracelink</h3><p>A prototype link tracing tool, TraceLink was developed that reflects the overall <span class="key1">traceability</span> model for the industrial firm as shown in Fig. 2. See Fig. 3 for a screenshot of the tool. The <span class="key1">traceability</span> <span class="key2">links</span> between the repositories are stored in an XML file. The “Show Linked Artifacts” button displays all <span class="key6">artifacts</span> that are linked to the one selected on the left pane in the window. In Fig. 1, all <span class="key6">artifacts</span> linked to Req 2.1.1, for example, are displayed in the right pane. It is also able to show which repositories are linked. </p><p>When the user clicks the “Check for Changed Artifacts” button, the <span class="key8">tool</span> shows in the right pane all <span class="key6">artifacts</span> that have their status field set to “modified”. For each of these artifacts, it lists the impacted <span class="key6">artifacts</span> that could be within the same repository or another repository. In the future, instead of users clicking the “Check for Changed Artifacts” button, the <span class="key8">tool</span> will automatically notify registered users of a modified artifact via email. Note that the goal of the <span class="key3">study</span> was not to determine if TraceLink was useful, rather it was to determine if the presence of <span class="key1">traceability</span> <span class="key2">links</span> (via the TraceLink) <span class="key8">tool</span> had an effect in solving the tasks. We use TraceLink as a means to view <span class="key1">traceability</span> <span class="key2">links</span> in the experimental group as described below in the experimental design.</p><h3>B. Experimental Design and Hypotheses</h3><p>Following the template by Wohlin [13], the experiment seeks to analyze the effect of using <span class="key1">traceability</span> <span class="key2">links</span> via TraceLink, for performing <span class="key7">software</span> maintenance <span class="key5">tasks</span> with respect to effectiveness (accuracy) and efficiency (speed) from the point of view of the researcher in the context of industry practitioners and <span class="key7">software</span> engineering students. The detailed null hypotheses are given below. The alternative hypotheses are 1-tailed predicting TraceLink performs better. The hypothesis testing is done at 95% significance (alpha=0.05).</p><p>The overview of the experiment is shown in Table III. The main factor being analyzed is the link-tracing method with two treatments: without <span class="key2">links</span> (no TraceLink) and with <span class="key2">links</span> (links displayed using TraceLink). While analyzing the results we also looked at secondary factors such as the effects of subjects' ability level (high vs. low ability) on accuracy, difficulty level and speed combined with the link-tracing method. The difficulty level refers to a rating of easy, medium or hard given by the participant for each of the five <span class="key7">software</span> maintenance tasks. </p><h3>C. Participants</h3><p>A total of 28 participants were involved in the study: 22 <span class="key7">software</span> engineering students and six practitioners (three developers and three testers) from industry. We split the participants into two groups. Only one group used TraceLink to solve the tasks. The other group were not provided with <span class="key1">traceability</span> links. To ensure a variety of abilities in both groups, the students were randomly placed into two groups. Industry participants were also randomly assigned into one of two groups of 14 people each. Both the control and experimental groups had eight high-ability <span class="key10">subjects</span> and six low-ability subjects. Six of the <span class="key10">subjects</span> from industry are very skilled practitioners who have been developing and testing <span class="key7">software</span> for at least 5 years.</p><h3>D. Subject System</h3><p>A room management system (RMS) was used in the study. This system was developed by students in a <span class="key7">software</span> engineering capstone class and refined later by the authors of this paper to reflect a complete system. The system is about 10 K lines of code. The system is responsible for managing shared office, meeting, laboratory, and teaching space and includes a web-based component and a physical device outside each room. The main features are reserving rooms, displaying reservations and editing reservations.</p><p>It is important to point out that the industrial survey provided two important outcomes: (1) the linking between <span class="key4">project</span> artifacts, for example, <span class="key9">requirements</span> is linked to test, test is linked to build, etc., and 2) five different stakeholders' <span class="key1">traceability</span> views. In this study, we used the first outcome. We plan to use the second outcome in another <span class="key3">study</span> as part of our future work.</p><p>A total of 165 <span class="key6">artifacts</span> were part of the test, requirements, design, code, code inspection, build and defects repositories. <span class="key4">project</span> management and release <span class="key6">artifacts</span> are not included in the <span class="key3">study</span> because there were not available for the RMS at the time we conducted the study. We manually traced 402 <span class="key2">links</span> between <span class="key6">artifacts</span> based on the results of the industrial survey (See Figs. 1 and 2). These <span class="key2">links</span> are verified with industrial stakeholders. Table IV shows the different <span class="key2">links</span> from source to target between the repositories in our system. </p><h3>E. Tasks</h3><p>There were five <span class="key5">tasks</span> created for the RMS each under a different category. Task 1 (T1), was about adding new functionality. Task 2 (T2), consisted of changing existing functionality. Task 3 (T3), dealt with fixing incorrect behavior. Task 4 (T4), was responsible for porting existing functionality and Task 5 (T5), dealt with an IDE change. For example T1 was based on adding new functionality: Customer requested the following new requirement for the RMA system: 2.1.8. For some rooms, the maximum time of reservation is 2 hours for any user. What are the impacted <span class="key6">artifacts</span> due to the new requirement? All tasks, T1, T2, T3, T4, and T5 require tracing the impacted <span class="key6">artifacts</span> for RMS. The order in which task should be solved first by participants does not matter. There is no dependency between the tasks. Table V shows the <span class="key5">tasks</span> used in the study. We have provided all the <span class="key3">study</span> material at http://www.csis.ysu.edu/~bsharif/tracelinkstudy and refer the reader there for more details. </p><h3>F. Running the Study</h3><p>A week before the <span class="key3">study</span> was conducted the participants were given a document describing the subject system. The document contained a description of all the repositories set up for the system as well as information within each repository such as <span class="key9">requirements</span> and design documents. This was done to familiarize the participants with the system. The students were also given a quiz-like assignment to make sure they read the materials ahead of time. They were also given a 15 minute lecture on the importance of <span class="key7">software</span> <span class="key1">traceability</span> and the problems/challenges facing industry.</p><p>The <span class="key3">study</span> was conducted at three different locations (classroom, computer lab, industrial firm) and took approximately one hour. The <span class="key5">tasks</span> were presented to the <span class="key10">subjects</span> on paper. They were asked to trace the <span class="key6">artifacts</span> that were impacted for each <span class="key7">software</span> maintenance task. <span class="key10">subjects</span> were asked to note the start and end time for each task on paper as well as indicate the level of difficulty (Easy, Average, Difficult) they faced for each of the five tasks. All the data was collected on paper questionnaires and later tabulated.</p><p>In addition to the <span class="key5">tasks</span> provided to all, people in group 1 (that were provided no links) were provided with an electronic file that contained all <span class="key6">artifacts</span> for the system. People in group 2 were provided with the same material as group 1, and in addition they were also presented with <span class="key1">traceability</span> <span class="key2">links</span> between the <span class="key6">artifacts</span> via the TraceLink tool. The <span class="key8">tool</span> contains all <span class="key6">artifacts</span> and the 402 <span class="key2">links</span> listed in Table IV. A sample demo for group 2 on how to use the <span class="key8">tool</span> was given before the <span class="key3">study</span> began. The academia <span class="key10">subjects</span> took the <span class="key3">study</span> in a computer lab while industry <span class="key10">subjects</span> did the <span class="key3">study</span> at their workplace. After all <span class="key10">subjects</span> were done with the five tasks, they completed a post-questionnaire.</p><h3>G. Experimental Results and Analysis</h3><p>Due to non-normality of the data (based on results from the Shapiro-Wilk test) and a sample size less than 30, we use the non-parametric Mann-Whitney test (for non-paired samples) to determine statistical significance between the two groups. Fig. 4 shows boxplots for the three dependent variables: accuracy, speed (time), and difficulty level. </p><h4>1. Accuracy, Speed, Difficulty, and Interaction Effects</h4><p>Each question was given a score based on the correct answer given by subjects. The score denotes the accuracy. Table VI shows the p-values for the Mann-Whitney test for each of the five <span class="key5">tasks</span> as well as all the <span class="key5">tasks</span> accumulatively. With respect to all the <span class="key5">tasks</span> (last row), we see that the only significant variable is accuracy. We are thus able to reject the null hypothesis H1, showing that there is a significant difference (p-value=0.0001) in task accuracy when performing maintenance <span class="key5">tasks</span> in the presence of <span class="key1">traceability</span> <span class="key2">links</span> presented via TraceLink, resulting in higher accuracy. T4 seemed to benefit the most from the presence of <span class="key1">traceability</span> <span class="key2">links</span> via TraceLink (p-value=0.0003) followed by T5 and T2. No significance was detected in T1 and T3. One reason could be due to the fact that T4, T5, and T2 were harder than T1 and T3. When all <span class="key10">subjects</span> are considered, the users that were presented <span class="key1">traceability</span> <span class="key2">links</span> in TraceLink were 86.06% more accurate than <span class="key10">subjects</span> that didn't use <span class="key1">traceability</span> links. </p><p>With respect to speed and difficulty, the only time we achieve significance is with T5. Thus we cannot reject H2 which states that there is no difference in speed between the group presented with <span class="key1">traceability</span> <span class="key2">links</span> via TraceLink vs. the control group. It is important to mention that <span class="key10">subjects</span> using TraceLink pointed out that they didn't have enough training on using the <span class="key8">tool</span> before performing the <span class="key5">tasks</span> of the <span class="key3">study</span> and that impacted their speed. They said that they were learning how to use the <span class="key8">tool</span> while they were solving the tasks. This may be one of the reasons why we did not see more improvements in speed. Not enough training was given to <span class="key10">subjects</span> due to their limited time. A future replication of the experiment with more training would help determine if this was the case. It is important to mention that industry <span class="key10">subjects</span> were 21% faster in solving the <span class="key5">tasks</span> using <span class="key1">traceability</span> <span class="key2">links</span> than their colleagues that didn't use the <span class="key8">tool</span> that showed them <span class="key1">traceability</span> <span class="key2">links</span> in the system.</p><p>In order to determine interaction effects, a linear mixed-effects regression model is fit to each of the dependent variables: accuracy, speed, and difficulty level with respect to all <span class="key5">tasks</span> accumulatively. The explanatory variables were Group (with links, without links), Ability (high, low) and Type (industry, academia). Table VII shows the model parameters for accuracy and time only, because difficulty level was not significant for any explanatory variable. </p><p>As we can see from Table VII, none of the interactions are significant. We do find that the presences of <span class="key1">traceability</span> <span class="key2">links</span> had a significant effect on the accuracy variable (p-value=0.009), which confirms the results from the Mann-Whitney test presented earlier. Ability (high, low) and Type (academia, industry) are individually significant with respect to the time dependent variable. Based on the observations, we cannot reject the null hypothesis H3 which states that Ability does not interact with the link tracing method to have an effect on time or accuracy.</p><p>There are some interesting observations to be made despite not finding any significant interaction effects. With respect to accuracy, there was a very small difference between Type (academia and industry) within the group that used <span class="key1">traceability</span> <span class="key2">links</span> via the tool. There was also a small difference between Ability (high and low) within the experimental group compared to the control group (presented with no <span class="key2">links</span> or tool). Both high and low ability <span class="key10">subjects</span> scored higher in the experimental group vs. the control group.</p><p>With respect to time, in the experimental group, students and industry <span class="key10">subjects</span> were also comparable (See Fig. 5). Without <span class="key1">traceability</span> links, industry <span class="key10">subjects</span> took longer than students. This can be attributed to the fact that the <span class="key10">subjects</span> from industry took the <span class="key3">study</span> more seriously. If students did not get an answer within a certain time they just moved on to the next task. However, if they were given <span class="key1">traceability</span> <span class="key2">links</span> via the tool, they tend to find the task more solvable and spend time on it. Another observation is that <span class="key10">subjects</span> with high ability levels took longer than those with low ability levels, again due to the seriousness of the <span class="key10">subjects</span> wanting to perform well.  </p><h4>2. Post-Questionnaire Results</h4><p>The post questionnaire asked the participants to rate their experience in the study. Both groups were given a common set of 7 questions. The questions were based on time needed, document understanding, clear objectives, clear tasks, diagram reading difficulty, task difficulty overall, and percentage of time spent reading the document. The group that was given <span class="key1">traceability</span> <span class="key2">links</span> answered four additional questions regarding percentage of time spent using the <span class="key1">traceability</span> <span class="key2">links</span> in the tool, <span class="key8">tool</span> usefulness, <span class="key8">tool</span> user friendliness and general comments on improving the way <span class="key2">links</span> are presented to them. On average, the experimental group (given the links) felt that they had more time to complete the task than the control group without links. The <span class="key9">requirements</span> document and <span class="key5">tasks</span> were clear to all subjects. The Mann-Whitney test found a significant difference between the experimental and control groups when it came to percentage of time spent reading the document vs. using <span class="key1">traceability</span> links. The group that used the <span class="key8">tool</span> reported that the <span class="key8">tool</span> was very useful and easy to use. The percentage of time taken using the <span class="key8">tool</span> was 60% on average.</p><p>The industry participants were given an additional post-questionnaire to fill out and were also interviewed after the study. The questions were open ended to probe them with respect to their experience with maintenance <span class="key5">tasks</span> that benefit from <span class="key1">traceability</span> in their daily work as well as potential features of a <span class="key1">traceability</span> link presentation <span class="key8">tool</span> (discussed in Section V). Some of the important highlights are presented below. </p><ul><li>Four out of five developers acknowledged that they encountered the situations described in the <span class="key7">software</span> maintenance <span class="key5">tasks</span> in their daily work. This suggests that the <span class="key5">tasks</span> developed for the <span class="key3">study</span> were similar to real-world <span class="key5">tasks</span> developers encounter in industrial software.</li><li>Two out of five developers reported that they like to see <span class="key2">links</span> directly between <span class="key9">requirements</span> and source code since design information is usually out of date as soon as a line of source code is added/modified.</li><li>Four out of five developers reported that visual linking is very helpful. One of the four developers reported that providing visual linking for small size projects would not be that useful, but as the <span class="key4">project</span> size increases, its importance would also increase.</li><li>Another developer reported that visual linking might help out in small projects, but when used with a large project, the view will be a large birds-nest picture which would be impossible to decipher. This shows that even though the developer appreciates traceability, he/she does not want to be overburdened with a hodgepodge of links.</li><li>One of the developers reported that there is a need for required fields for the artifact in each repository that helps linking the repositories.</li><li>Another developer stated that it would be nice if an item has tags (topics) and search functionality using tags. This was a very important observation since search trumps navigation.</li></ul><p>SECTION V.</p><h2>Discussion</h2><p>The results of the <span class="key3">study</span> indicate that using <span class="key1">traceability</span> <span class="key2">links</span> leads to significantly more correct answers for <span class="key7">software</span> maintenance tasks. With respect to speed, industry <span class="key10">subjects</span> who given <span class="key1">traceability</span> <span class="key2">links</span> (via TraceLink) were faster than <span class="key10">subjects</span> that were not given any <span class="key2">links</span> (group with no TraceLink). In academia, however, <span class="key10">subjects</span> who did not have <span class="key1">traceability</span> <span class="key2">links</span> were faster. This can be due to the fact that industry <span class="key10">subjects</span> are more accustomed to using tools (given that the <span class="key2">links</span> were presented via the TraceLink tool) compared to students; in addition, more training was needed on the <span class="key8">tool</span> as pointed out by some subjects. With more training we could expect to see a significant difference in time needed to solve the tasks. This is left as a future exercise.</p><p>Results also show that the use of <span class="key1">traceability</span> <span class="key2">links</span> reduces the gap between high and low ability <span class="key10">subjects</span> as well as between academia and industry subjects. This is an important finding because given <span class="key1">traceability</span> links, we can have novices solve <span class="key5">tasks</span> faster and hopefully improve their skills that lead them to become experts in the future.</p><p>Note that the <span class="key3">study</span> conducted in this paper tries to determine the effect of the presence of <span class="key1">traceability</span> <span class="key2">links</span> in <span class="key7">software</span> maintenance tasks. The method of how the <span class="key2">links</span> are presented to the user is of lesser importance in the study. We chose to have the <span class="key2">links</span> presented in a prototype <span class="key8">tool</span> called TraceLink.</p><p>The observations presented in the rest of this section are useful to <span class="key1">traceability</span> <span class="key8">tool</span> developers in order to get more industry acceptance of the tools they develop to present <span class="key1">traceability</span> <span class="key2">links</span> to human analysts/developers. It also incorporates the different views from different stakeholders; another contribution of this paper. The following are interesting findings as stated by developers. One developer stated “I would only expect it to list the connections in a simple-to-use way making them easier to understand”. This implies that <span class="key1">traceability</span> needs to be effortless and almost second nature in order for it to be adopted. Another developer stated that “as an automated tester, all test cases are automatically generated. So I don't need to trace as much as the questions in the study”. The automated tester believes that when creating the automated test suite, <span class="key1">traceability</span> is required, but after that tracing is not needed much. This could be the case in some instances.</p><p>One developer stated the following: “The developer is the one who is generating most of the information contained in these repositories. The design and <span class="key9">requirements</span> in many organizations are generally not well defined, and therefore do not really provide good information. At best, that information is helpful at the beginning of a development project, but are soon outdated because they are not kept up-to date. A <span class="key4">project</span> manager or test engineer would use the tools in a different manner and seek different information than a developer, but they are generally light users of the tools and generally are manipulating the data instead of generating the information”.</p><p>SECTION VI.</p><h2>Developer Comments on Tracelink</h2><p>This section presents what developers are interested to see in a <span class="key1">traceability</span> <span class="key8">tool</span> to help them in <span class="key7">software</span> maintenance tasks. Based on the input from developers in industry, some of the features that need to be supported by a <span class="key1">traceability</span> system are given below. These were all additional feature requests made by the <span class="key10">subjects</span> as they used TraceLink to solve the maintenance tasks. These observations are mentioned here with the goal of aiding future <span class="key1">traceability</span> <span class="key8">tool</span> developers. </p><ul><li>A simple search function similar to grep would be required. Note that TraceLink provided a way to find all <span class="key2">links</span> that were related to a given artifact however searching on specific keywords was not implemented.</li><li>A <span class="key1">traceability</span> system should have more than one level of linking. For example, if artifact A is linked to artifact B and B is linked to artifact C, the <span class="key8">tool</span> shall support A to B and A to C linking. This is important during <span class="key9">requirements</span> gathering to test for contradicting requirements.</li><li>A <span class="key1">traceability</span> system should support functionality to create different kinds of reports. For example, the <span class="key8">tool</span> should provide a table format. A report can be a table that lists builds, associated requirements, defects, test cases, etc.</li><li>A <span class="key1">traceability</span> system should support artifact linkage in a graphical format in which filtering is a must to avoid being presented with an overwhelming number of links.</li><li>Traceability needs to be almost effortless and blend in with the <span class="key7">software</span> process in order for it to be adopted in industry.</li><li>All <span class="key6">artifacts</span> associated with a <span class="key4">project</span> should be linked to the <span class="key4">project</span> plan and provide easy navigation. When a developer gets assigned to work on a project, the developer sometimes reviews the <span class="key4">project</span> plan. The <span class="key4">project</span> plan mentions requirements, design, code, test, and other artifacts. It will be nice if the <span class="key4">project</span> plan has <span class="key2">links</span> that user can click on to get to the requirements, test cases, and other <span class="key6">artifacts</span> associated with the project. This type of <span class="key1">traceability</span> is not only important to developers, but also to <span class="key4">project</span> managers.</li><li>A <span class="key1">traceability</span> system should provide views that are specific to stakeholders. This is an important feature that tends to be overlooked. For example, a developer who needs to visit the <span class="key2">links</span> that are of interest to him/her doesn't need to dive into an overall view that has <span class="key2">links</span> between all <span class="key6">artifacts</span> that is most useful to the <span class="key4">project</span> manager. Too many <span class="key2">links</span> impact developers' time and accuracy because the view can get complex and errors may occur.</li></ul><p>The abovementioned features are useful to <span class="key1">traceability</span> <span class="key8">tool</span> developers in order to have their tools more readily adopted by industry. The lesser the effort required by a stakeholder to use a <span class="key1">traceability</span> system, the easier it is to adopt. Note that TraceLink was not designed to provide a fully working <span class="key1">traceability</span> system, rather an electronic way of presenting <span class="key10">subjects</span> with <span class="key1">traceability</span> links.</p><p>SECTION VII.</p><h2>Threats to Validity</h2><p>The four main threats to validity are internal, external, construct and conclusion validity. With respect to internal validity, the <span class="key3">study</span> was between-subjects and did not suffer from learning effects between groups. Within each group, each task was from a different category and didn't overlap so there were no learning effects involved there either. The <span class="key3">study</span> was done in a classroom/lab setting or an industrial setting with dedicated time allotted to it, so as to minimize any other external factors that might have an effect on the results. A tutorial was given to all <span class="key10">subjects</span> prior to the <span class="key3">study</span> to make sure all <span class="key10">subjects</span> were at the same knowledge level we expected. None of the <span class="key10">subjects</span> were familiar with the room management system prior to the study.</p><p>With respect to construct validity, we choose to measure accuracy, speed, and difficulty level. Since our <span class="key3">study</span> goal was to assess the effect of <span class="key1">traceability</span> <span class="key2">links</span> on <span class="key7">software</span> maintenance tasks, we measure performance on the <span class="key5">tasks</span> via accuracy and speed. Better performance indicates higher accuracy and lower speed i.e., time to complete task. The difficulty level gave us some indication of how difficult the <span class="key5">tasks</span> were for them to solve. This combined with accuracy and speed was used in the analysis. The students were not told and did not know the hypotheses in advance. Some of the <span class="key4">project</span> managers were developers before and their input may be affected by their previous role. It would be nice to have the same number of industry experts as students but it was hard to find many developers volunteering to invest their time for this activity.</p><p>External validity deals with generalizing the results of the study. The <span class="key3">study</span> and survey is conducted at one industrial firm and on one system. The survey does reflect a single firm view. However, it is a step towards identifying <span class="key2">links</span> interesting to different stakeholders. It is quite challenging to find a bunch of firms willing to participate and invest time in surveys and studies such as the one we conducted. We welcome <span class="key1">traceability</span> researchers to build on top of the results in this paper and conduct such surveys with other industrial firms to advance this body of knowledge. Replicating this <span class="key3">study</span> with a larger sample from different organizations in different domains and with different systems and <span class="key5">tasks</span> can help reduce this threat. We leave this as future work. Even though the subject system used is not a large open source system, the questions asked with respect to a feature that needs to be added/changed is comparable to similar issues in open source issue tracking systems. We derived our <span class="key5">tasks</span> after browsing the Bugzilla database for various projects. The developers also agreed in the post questionnaire that the <span class="key5">tasks</span> were realistic. Also, there are not many open source systems that have <span class="key1">traceability</span> matrices available for use which makes the choice of a subject system very narrow. Most <span class="key1">traceability</span> papers use the same academic datasets such as iTrust [14] to validate their link retrieval/evolution algorithms. In this regard, we can consider the room management system dataset as yet another dataset with developer provided <span class="key1">traceability</span> <span class="key2">links</span> that could be used by <span class="key1">traceability</span> researchers in the future. Our results from the <span class="key3">study</span> are only generalizable to maintenance <span class="key5">tasks</span> that are similar (i.e., finding <span class="key6">artifacts</span> that need to be changed if a feature is added, changed, or behaves incorrectly). Our results from the industrial survey are generalizable only to industrial firms that follow similar process models. We do not claim that these results would apply to all settings. Further empirical studies are needed to validate this generalization.</p><p>With respect to conclusion validity, due to low sample size and non-normality of data we use the Mann-Whitney test for hypotheses testing.</p><p>SECTION VIII.</p><h2>Related Work</h2><p>This section first presents related work in <span class="key7">software</span> collaborations. Hildenbrand et al. [15] evaluates collaborative approaches in requirement engineering, design and modeling processes, implementation, testing and maintenance. Whitehead [16] presents a list of goals for <span class="key7">software</span> engineering collaboration and surveys existing collaboration support tools in <span class="key7">software</span> engineering. He divides the collaboration tools into four categories: model-based, process support, awareness, and infrastructure. Trude et al. [1] presents empirical studies on collaborative <span class="key7">software</span> development. The studies are on the areas of collaboration during requirement engineering, collaboration during design, collaboration on distributed <span class="key7">software</span> development, existing collaboration tools, new collaboration tools, collaboration in open source, and collaboration in <span class="key4">project</span> management. Different tools are identified in [1], [15], [16] for collaborative <span class="key7">software</span> development. Some of these tools are configuration management tools [17]–[18][19], instant messaging tools [20], [21], source code annotation tools [22], [23], processes tools [24], awareness tools, [25], [26] and <span class="key4">project</span> management tools [27], [28]. None of these studies focus on artifact-based collaborations via traceability: a view we take in this paper.</p><p>We now present representative related work in traceability, models, tools, link recovery, link evolution, link visualization, empirical studies, and case studies in industry. We also describe how this work complements, differs and adds to the current understanding of the community. In our prior work, <span class="key1">traceability</span> link definitions and a link model was developed [8]. A fine grained differencing mechanism to evolve <span class="key1">traceability</span> <span class="key2">links</span> was proposed in [29]. Spanoudakis and Zisman [11], [12] describe types of <span class="key1">traceability</span> <span class="key2">links</span> between requirements, use cases and analysis object models. Their <span class="key2">links</span> are based on existing <span class="key7">software</span> systems and also take into account <span class="key7">software</span> product lines. The link types presented in [11], [12] can be used in the model presented here targeted towards stakeholder roles.</p><p>Mäder et al. [30] conducted a <span class="key3">study</span> similar to the one presented in this paper. It assesses the effect of <span class="key9">requirements</span> <span class="key1">traceability</span> for maintenance <span class="key5">tasks</span> but uses only academic subjects, whereas our <span class="key3">study</span> uses <span class="key10">subjects</span> from academia and industry. Besides differences in the subject pool, they only trace <span class="key9">requirements</span> to code. Our <span class="key3">study</span> assesses <span class="key1">traceability</span> between requirements, design, code, builds, defects and test cases and supports many stakeholder roles. Similarities are that both studies use a prototype <span class="key8">tool</span> to test the effect of <span class="key1">traceability</span> on maintenance tasks, albeit with different subject pools. Both studies find that <span class="key1">traceability</span> <span class="key2">links</span> help accuracy and efficiency of maintenance tasks. In addition, our <span class="key3">study</span> finds that industry <span class="key10">subjects</span> who used <span class="key1">traceability</span> <span class="key2">links</span> (via the TraceLink tool) perform a lot better compared to their colleagues who didn't use any <span class="key1">traceability</span> links. Recall that in our study, <span class="key1">traceability</span> <span class="key2">links</span> were only given to one group and they used the <span class="key2">links</span> via the prototype TraceLink <span class="key8">tool</span> we built.</p><p>Traceability link recovery is an important part of any <span class="key1">traceability</span> system since it supports existing systems that don't have <span class="key2">links</span> defined a priori. DeLucia et al. discuss managing <span class="key1">traceability</span> for impact analysis and present the major challenges and research directions [31]. There are many papers such as [32]–[33][34][35][36][37] addressing the topic of link recovery. Although this paper does not address link recovery, these are important to consider when developing a <span class="key1">traceability</span> system. <span class="key1">traceability</span> tools such as ADAMS [38], Poirot [39], ACTS [40], traceMaintainer [3] and Traceclipse [41] have been developed for link recovery and management in academia. DeLucia et al. [42] conduct a controlled experiment to assess the usefulness of an information retrieval based <span class="key1">traceability</span> recovery tool. Results show that the <span class="key8">tool</span> reduces the time spent vs. manual tracing. These studies compare different <span class="key1">traceability</span> techniques instead of assessing the effect of <span class="key1">traceability</span> itself on maintenance tasks. None of the studies look at the effect of <span class="key1">traceability</span> <span class="key2">links</span> on <span class="key7">software</span> maintenance tasks: the main goal of the <span class="key3">study</span> we present in this paper. A secondary goal of this paper was to gather data on what features are needed in a <span class="key1">traceability</span> system/tool that can be adopted successfully in industry.</p><p>There has also been some work on the visualization of <span class="key1">traceability</span> links. Marcus et al. [43] was the first paper attempting to visualize <span class="key1">traceability</span> <span class="key2">links</span> with TraceViz, and presents a list of visualization requirements. More recently Chen's work [44] focuses on visualizing <span class="key1">traceability</span> <span class="key2">links</span> in a <span class="key4">project</span> using a graph toolkit in Eclipse. VisMatrix [45] generates a graphical representation of the <span class="key9">requirements</span> <span class="key1">traceability</span> matrix. None of the above work conduct empirical studies to determine the feasibility of these visual representations in practice. We consider this paper to be the first attempt to conduct an empirical <span class="key3">study</span> to understand what industry developers actually need in a <span class="key1">traceability</span> tool. It takes a similar but small scale empirical approach as Ramesh et al. [6], by conducting a survey to determine what types of <span class="key2">links</span> practitioners are interested in. The work presented in this paper addresses the types of <span class="key2">links</span> sought by stakeholders (via an industrial survey) for collaboration. This is a first attempt at determining the types of <span class="key2">links</span> that are most useful to each different stakeholder. In addition, a <span class="key3">study</span> conducted on <span class="key7">software</span> maintenance <span class="key5">tasks</span> was used to determine the benefits of a <span class="key1">traceability</span> <span class="key2">links</span> for artifact-based collaboration in practice.</p><p>Gotel and Finkelstein [46] were one of the first researchers to do an empirical <span class="key3">study</span> among <span class="key7">software</span> developers in a large industrial firm. Their main goal was to understand the scale of <span class="key1">traceability</span> problem. They did not consider the effect of <span class="key1">traceability</span> <span class="key2">links</span> on maintenance tasks. Ramesh et al. [6] also conduct a <span class="key3">study</span> on industry practitioners by gathering data via questionnaires to better understand <span class="key1">traceability</span> <span class="key2">links</span> used. They define reference models based on their survey. Similar studies [47], [48] like the ones by Gotel and Ramesh have been done on a smaller scale but none of them look into the effects of <span class="key1">traceability</span> <span class="key2">links</span> on <span class="key7">software</span> maintenance <span class="key5">tasks</span> versus not having the links. Our <span class="key3">study</span> seeks to provide via empirical evidence that when developers are given <span class="key1">traceability</span> <span class="key2">links</span> to work with, they are better at <span class="key7">software</span> maintenance tasks.</p><p>Asuncion et al. [49] present an end-to-end <span class="key1">traceability</span> <span class="key8">tool</span> developed at a <span class="key7">software</span> firm that supported the entire life-cycle and focused on <span class="key9">requirements</span> <span class="key1">traceability</span> and the <span class="key1">traceability</span> process. Several guidelines were presented after deploying the <span class="key1">traceability</span> <span class="key8">tool</span> within the company. The above work complements the work in this paper. Neumuller et al. [50] also developed and applied a <span class="key1">traceability</span> system in a small company and reported their findings. The findings from our <span class="key3">study</span> corroborate with [50]; in both cases a need for better tools is called for. The <span class="key3">study</span> presented in this paper is a controlled experiment and differs from [50] because in this study, focused <span class="key7">software</span> maintenance <span class="key5">tasks</span> were used to determine the usefulness of the <span class="key2">links</span> via a prototype tool, TraceLink. Heindl et al. [51] discussed the application of <span class="key9">requirements</span> <span class="key1">traceability</span> to risk assessment and developed a cost-benefit model to help <span class="key4">project</span> managers. Klimpke et al. [2] conducted a case <span class="key3">study</span> at five industrial firms to determine how <span class="key1">traceability</span> was realized in practice. They also pointed out what needed to be considered in order to adopt <span class="key1">traceability</span> in industry. They found that companies used <span class="key1">traceability</span> in an ad hoc manner since there was a lack of existing tools that were customizable for their needs. Even though the <span class="key3">study</span> presented in this paper was done at only one firm, the findings were similar to those of Klimpke et al.</p><p>There have been several recent papers related to improving the performance of <span class="key9">requirements</span> to code traceability. We describe some of them next. Yu et al. [52] present an invariant <span class="key1">traceability</span> framework to merge changes that occur between user-modified code and template-generated code in model-driven development. They focus on maintaining the bidirectional <span class="key1">traceability</span> <span class="key2">links</span> as <span class="key7">software</span> changes; our paper is concerned with showing the benefit of having the <span class="key2">links</span> while developers perform maintenance tasks. The goal in this paper was not to create a <span class="key1">traceability</span> <span class="key8">tool</span> but to provide evidence that <span class="key1">traceability</span> <span class="key2">links</span> actually do help in <span class="key7">software</span> maintenance tasks. Charrada et al. [53] present an approach to automatically detect outdated <span class="key9">requirements</span> when source code changes. The <span class="key2">links</span> are updated when the system evolves over time. This is important because a <span class="key1">traceability</span> system is only as good as the validity of its <span class="key2">links</span> to requirements. Mahmoud et al. [54] use refactorings to improve the performance of requirements-to-code traceability. They showed that as a system evolves, when corrupted textual and lexical structure was restored with refactorings, a positive impact on <span class="key1">traceability</span> was reported. Niu et al. [55] and Dekhtyar et al. [56] <span class="key3">study</span> the human analyst's behavior in automated tracing. They note that the quality of the <span class="key9">requirements</span> <span class="key1">traceability</span> matrix is important. They examine both the <span class="key1">traceability</span> matrix quality and the rational decision making process of human analysts while they determine validity of links.</p><p>This papers mentioned in the above paragraph aim at supporting the evolution of <span class="key1">traceability</span> <span class="key2">links</span> and/or <span class="key9">requirements</span> as <span class="key7">software</span> systems evolve or understanding how analysts validate <span class="key1">traceability</span> links. They do not show evidence that these <span class="key2">links</span> are actually useful to developers in <span class="key7">software</span> maintenance tasks. All previous evidence was purely anecdotal. Since our goal was to determine the effect of link presence, we considered the actual <span class="key8">tool</span> used to be of secondary importance in this paper. For this reason, we created a simple prototype that provided us with enough linking to run the study. Any <span class="key8">tool</span> that provides <span class="key1">traceability</span> link information would suffice since the <span class="key8">tool</span> itself is not being evaluated, but the presence of <span class="key1">traceability</span> <span class="key2">links</span> is.</p><p>SECTION IX.</p><h2>Conclusion</h2><p>This paper presents a <span class="key3">study</span> to assess the effect of the presence of <span class="key1">traceability</span> <span class="key2">links</span> during <span class="key7">software</span> maintenance tasks. A prototype <span class="key8">tool</span> namely TraceLink was developed to test the hypotheses in the study. Twenty-eight <span class="key10">subjects</span> from industry and academia participated in the study. Results indicate a significant increase in task accuracy when <span class="key1">traceability</span> <span class="key2">links</span> were used to solve the tasks. <span class="key10">subjects</span> using <span class="key1">traceability</span> <span class="key2">links</span> were 86.06% more accurate. Using <span class="key1">traceability</span> <span class="key2">links</span> (via TraceLink) also reduced the gap between high and low ability <span class="key10">subjects</span> as well as between academic and industry subjects. This implies that using a <span class="key1">traceability</span> system provides more gains for low ability <span class="key10">subjects</span> making them more productive. Difficult <span class="key5">tasks</span> benefitted more from <span class="key1">traceability</span> <span class="key2">links</span> than the ones that were easier to solve. This is all the more evidence to adopt <span class="key1">traceability</span> practices in organizations.</p><p>In addition, an industrial survey was conducted before the <span class="key3">study</span> to determine the kinds of <span class="key1">traceability</span> <span class="key2">links</span> most needed by industry stakeholders for collaboration. Results from the survey include a <span class="key1">traceability</span> meta-model highlighting the strong relationship between the types of <span class="key2">links</span> needed and the stakeholder's role of developer, tester, and <span class="key4">project</span> manager. This is another important contribution of this paper. Several real-life scenarios are also discussed due to the lack of <span class="key1">traceability</span> at the industrial firm surveyed.</p><p>In future work, we plan to <span class="key3">study</span> <span class="key1">traceability</span> systems and interested <span class="key2">links</span> to different stakeholders at other industrial firms, as well as conduct a <span class="key3">study</span> that evaluates the benefits of a <span class="key1">traceability</span> system that provide views (defined in Section III), specific to stakeholders' roles. Furthermore, a reevaluation of the H2 hypothesis (in Section IV), needs to occur with more <span class="key10">subjects</span> and more in-depth training on the <span class="key1">traceability</span> tool. These replications will strengthen the findings presented here.</p>